/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/***********************************************************
				        DEFAULTS
***********************************************************/

html{
    font-size:16px;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1{
    font-size:2.2rem;
    font-weight:bold;
    padding:10px 0 15px;
}

h2{
    font-size:1.5rem;
    padding:40px 0 10px;
}

.container{
    width:1024px;
    margin:0 auto;
}

nav ul li{
    padding:10px;
}

.sidebarbox{
    background:rgb(128,128,128);
    border:2px solid rgb(50,50,50);
}

#content p{
    padding:10px;
}

#rainbow div{ height:30px; }
#re{ background: red; }
#or{ background: orange; }
#ye{ background: yellow; }
#gr{ background: green; }
#bl{ background: blue; }
#in{ background: indigo; }
#vi{ background: violet; }

/***********************************************************
				        Flexbox
***********************************************************/

nav ul{
	background-color: yellow;
	/* display in line */
	display:flex;
	/* justify conent tells the browser how you want the items inside the flexbox the behave the main axisx  */
	justify-content:space-evenly;
}

/* the div with the class bodyflex contains both the main and the aside */
.bodyflex{
	display:flex;
}

main{
	/* width:75%; */
	flex-basis:0;
	flex-grow:3;
}

aside{
	/* width:25%; */
	
	/* basis =0 ignore the content inside of it but will focus on the content outside */
	flex-basis:0;
	flex-grow:1;
	/* display flex is not inherited - so, if you want the aside to also use flexbox, you have to set it */
	display:flex;
	flex-direction:column-reverse;
}

aside .sidebarbox{
	/* by default - flex basis is set to 'auto', which means shrink to the size of the content
	if we give it a number, we assign a level of importance to the items - if they all have the same number, they all have the same
	size importance */
	flex-basis:0;
	/* then you have to use flex grow or flex shrink to tell the boxes how you want them to grow or shrink
	relative to the space the have and to each other */
	flex-grow:1;

	display:flex;
	/* justify content looks at the main axis (by default horizontal, or row) */
	/* to use justify content you need to use display flex */
	justify-content:center;
	/* align-items looks at the cross axis (by default, vertical or column */
	align-items:center;
	
}

aside .sidebarbox:nth-child(2){
	/* order in this case sends it to the end of the primary axis, which is column-reverse, or bottom to top - so the
	end of the axis means it sends it to the top (and a negative number would send it to the bottom)  */
	order:1;
}

#fish{
	display:flex;

	/* use flex wrap to allow the flex to wrap to the next line (or as many lines as necessery) */
	/* flex-wrap: wrap; */
}

#fish img{
	width:100%;
}

#rainbow{
	/* without any other instructions, elements with no content disappear when they are first set to display flex */
	display: flex;
}

#rainbow div{
	flex-basis:0;
	flex-grow:1;
}

#rainbow #re, #rainbow #bl{
	/* this will set these two divs to be twice the size of the other five, relative to the amount of space they have */
	flex-grow:2;
}

#rainbow #gr{
	/* this will make it larger/longer */
	flex-grow:4;
	/* a positive number will move it towards the end of the main axis (in this case, with the horizontal axis, towards the right */
	order: 1;
}

#rainbow #ye{
	/* a negative number will move it toward the start of the main axis (in this case, with the horizontal axis, towards the left */
	order: -1;
}

#rainbow #in{
	/* a higher number is "more important" - so negative 2 will set this further to the start than negative */
	order: -2;
}

#content{
	/* divs with content will try to take up as much space as they need, relative to the content of the other boxes */
	display: flex;
}

#content p{
	flex-basis:0;
	flex-grow:1;
}

/* flex is a shorthand property that combines flex-grow, flex-shrink, and flex-basis (in that order) */
#content p:nth-child(1){flex: 1 1 0;}
#content p:nth-child(2){flex: 5 1 0;}
#content p:nth-child(3){flex: 3 1 0;}
#content p:nth-child(4){flex: 1 1 0;}
#content p:nth-child(5){flex: 1 1 0;}

/***********************************************************
					Mobile Flexbox Example
***********************************************************/
.mobile-header{
	background-color:grey;
	/* vw = viewport width, vh = viewport height */
	width:100vw;
	height:100vh;
	display:flex;
	flex-direction:column;
}

.mobile-header div{
	/* ignore the content (flex-basis:0) and make sure each takes up an equal amount of space across the column (flex-grow:1) */
	flex-basis:0;
	flex-grow:1;

	/* fix the image so it doesn't repeat and always covers the whole box */
	background-repeat:no-repeat;
}

/* means go up one folder, as we need to get from the css file to the image file */
.mobile-header div:nth-child(1){background-image:url("../images/pancake-batfish.jpg");}
.mobile-header div:nth-child(2){background-image:url("../images/barreleye-fish.jpg");}
.mobile-header div:nth-child(3){background-image:url("../images/blobfish.jpg");}